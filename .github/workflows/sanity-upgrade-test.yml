---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: Upgrade Test

on:
  pull_request_review_comment:
    types: [created]  # Run on PR review comment "upgrade-test"
  schedule:
    - cron: "0 0 * * *"    # Run every day at midnight
  workflow_dispatch:     # Run on manual trigger
    inputs:
      run-upgrade-test:
        description: 'Run upgrade test'
        required: true
        default: 'false'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  upgrade-test:
    permissions:
      contents: read
    name: Upgrade deployed Infra charts and test Orchestrator
    if: |
      github.event_name != 'pull_request_review_comment' ||
      (github.event.comment.body && contains(github.event.comment.body, 'upgrade-test'))
    runs-on: ubuntu-24.04-16core-64GB
    timeout-minutes: 90
    env:
      ORCH_DEFAULT_PASSWORD: ${{ secrets.ORCH_DEFAULT_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683    # v4.2.2
        with:
          repository: open-edge-platform/edge-manageability-framework
          token: ${{ secrets.SYS_ORCH_GITHUB }}
          persist-credentials: false

      - name: Set up git credentials
        shell: bash
        run: |
          git config --global url."https://${{ secrets.SYS_ORCH_GITHUB }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Setup asdf and install dependencies
        uses: open-edge-platform/orch-utils/.github/actions/setup-asdf@main     # zizmor: ignore[unpinned-uses]

      - name: Get current git hash of the infra-charts PR
        id: get-git-hash-charts
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "GIT_HASH_CHARTS=${{ github.event.pull_request.head.sha }}" >> "$GITHUB_ENV"
          else
            echo "GIT_HASH_CHARTS=${{ github.sha }}" >> "$GITHUB_ENV"
          fi

      - name: Print current git hash of the infra-charts PR
        run: echo "Current infra-charts git hash is ${{ env.GIT_HASH_CHARTS }}"

      - name: Set custom emf deployment with branch dev/infra-charts-upgr-test
        id: new-emf-branch
        env:
          INFRA_CHARTS_REV: ${{ env.GIT_HASH_CHARTS }}
          GIT_USER: "git"
          GIT_TOKEN: ${{ secrets.SYS_ORCH_GITHUB }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch
          git checkout v3.0.0
          git checkout -b dev/infra-charts-upgr-test-${INFRA_CHARTS_REV}

          sed -i 's/^mage 1\.14\.0$/mage 1.15.0/' .tool-versions
          sed -i '/var githubRepos = \[\]/a\    "https://github.com/open-edge-platform/infra-charts",' mage/Magefile.go

          git commit -a -m "Custom infra-charts PR ${INFRA_CHARTS_REV}"

      - name: Get current git hash of the emf PR
        id: get-git-hash-deploy
        run: echo "GIT_HASH_DEPLOY=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"

      - name: Print current git hash of the emf PR
        run: echo "Current emf git hash is ${{ env.GIT_HASH_DEPLOY }}"

      - name: Deploy Orchestrator
        id: deploy-orch
        env:
          GIT_USER: "git"
          GIT_TOKEN: ${{ secrets.SYS_ORCH_GITHUB }}
          EDGE_MANAGEABILITY_FRAMEWORK_REV: ${{ env.GIT_HASH_DEPLOY }}
          DOCKERHUB_TOKEN: ${{ secrets.SYS_DOCKERHUB_RO }}
          DOCKERHUB_USERNAME: ${{ secrets.SYS_DOCKERHUB_USERNAME }}
        run: |
          set +x
          echo "Starting to deploy Orchestrator..."
          mage deploy:kindAll
          echo "Orchestrator deployment done!"
          echo "Root App Status:"
          kubectl -n dev get applications root-app -o yaml

          echo "Adding Argo Github Repos..."
          mage argo:login
          mage argo:addGithubRepos

      - name: Verify kind deployment
        id: verify-emf-deployment
        timeout-minutes: 25
        run: |
          echo "Starting to verify Orchestrator deployment..."
          mage deploy:waitUntilComplete
          echo "Prints pods status..."
          kubectl get pods -A
          echo "Orchestrator deployment verified!"
          mage router:stop router:start
          echo "Router restarted"

      - name: Setup environment
        shell: bash
        run: |
          sudo awk -i inplace '/BEGIN ORCH DEVELOPMENT HOSTS/,/END ORCH DEVELOPMENT HOSTS/ { next } 1' /etc/hosts
          sudo awk -i inplace '/BEGIN ORCH SRE DEVELOPMENT HOST/,/END ORCH SRE DEVELOPMENT HOST/ { next } 1' /etc/hosts
          mage gen:hostfileTraefik | sudo tee -a /etc/hosts > /dev/null
          echo "Updated Hostfile entries!"
          mage gen:orchCa deploy:orchCa

      - name: Setup users and project/org
        shell: bash
        run: |
          mage tenantUtils:createDefaultMtSetup
          echo "Orch org/project/users created!"
          echo "Project uID:"
          kubectl get projects.project -o json | jq -r ".items[0].status.projectStatus.uID"

      - name: Setup edge-node-simulator
        shell: bash
        timeout-minutes: 10
        run: |
          echo "Starting to instantiate ensim"
          helm upgrade --install -n orch-infra ensim \
              oci://registry-rs.edgeorchestration.intel.com/edge-orch/infra/charts/ensim \
              --set global.registry.name=registry-rs.edgeorchestration.intel.com/edge-orch/ \
              --set configArgs.server.orchFQDN=kind.internal \
              --set tlsSecretName=gateway-ca-cert
          echo "Wait for ensim to be running!"
          sleep 5
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=ensim -n orch-infra --timeout=5m

      - name: Checkout ensim (virtual-edge-node) repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683     # v4.2.2
        with:
          repository: open-edge-platform/virtual-edge-node
          path: virtual-edge-node
          token: ${{ secrets.SYS_ORCH_GITHUB }}
          persist-credentials: false

      - name: Checkout latest released tag of virtual-edge-node/edge-node-simulator repository
        working-directory: virtual-edge-node
        shell: bash
        run: |
          echo "Fetching all tags..."
          git fetch --tags

          echo "Finding the latest tag matching 'edge-node-simulator/v*'..."
          LATEST_TAG=$(git tag -l "edge-node-simulator/v*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
           echo "No tags found matching 'edge-node-simulator/x.y.z'. Exiting."
            exit 1
          fi
          echo "Checking out the latest tag: $LATEST_TAG"
          git checkout $LATEST_TAG

      - name: Install virtual-edge-node tools-versions
        working-directory: virtual-edge-node
        shell: bash
        run: |
          asdf install

#      - name: Run E2E integration test - create Virtual Edge Node
#        working-directory: virtual-edge-node/edge-node-simulator
#        env:
#          CA_PATH: ${{ github.workspace }}/orch-ca.crt
#          PASSWORD: 'ChangeMeOn1stLogin!'
#          PROJECT: 'sample-project'
#        shell: bash
#        run: |
#          PROJECT_ID=$(kubectl get projects.project -o json | jq -r ".items[0].status.projectStatus.uID")
#          echo "Set port-forward to ensim/api"
#          kubectl port-forward svc/ensim -n orch-infra --address 0.0.0.0 3196:3196 &
#          kubectl port-forward svc/api -n orch-infra --address 0.0.0.0 8080:8080 &

#          echo "Runs day0 tests - create Virtual Edge Node"
#          # Runs day0 integration tests
#          ginkgo -v -r --fail-fast --race --json-report infra-tests-day0.json --output-dir . --label-filter="infra-tests-custom-day0-create" ./test/infra -- \
#            -project=${PROJECT} -projectID=${PROJECT_ID} -caFilepath=${CA_PATH} -simAddress=127.0.0.1:3196 \
#            -orchFQDN=kind.internal -infraURL=http://127.0.0.1:8080/edge-infra.orchestrator.apis/v1 \
#            -edgeAPIUser=sample-project-api-user  -edgeAPIPass=${PASSWORD} \
#            -edgeOnboardUser=sample-project-onboarding-user -edgeOnboardPass=${PASSWORD}

      - name: Upgrade emf deployment with branch dev/infra-charts-upgr-test
        id: customize-charts-from-branch
        timeout-minutes: 15
        env:
          INFRA_CHARTS_REV: ${{ env.GIT_HASH_CHARTS }}
          GIT_USER: "git"
          GIT_TOKEN: ${{ secrets.SYS_ORCH_GITHUB }}
          EDGE_MANAGEABILITY_FRAMEWORK_REV: ${{ env.GIT_HASH_DEPLOY }}
          DOCKERHUB_TOKEN: ${{ secrets.SYS_DOCKERHUB_RO }}
          DOCKERHUB_USERNAME: ${{ secrets.SYS_DOCKERHUB_USERNAME }}
        run: |

          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Replaces +/targetRevision: with the current git hash of the infra-charts PR
          sed -i "s/targetRevision: [a-zA-Z0-9.]\+/targetRevision: ${INFRA_CHARTS_REV}/" argocd/applications/templates/infra-core.yaml
          sed -i "s/targetRevision: [a-zA-Z0-9.]\+/targetRevision: ${INFRA_CHARTS_REV}/" argocd/applications/templates/infra-managers.yaml
          sed -i "s/targetRevision: [a-zA-Z0-9.]\+/targetRevision: ${INFRA_CHARTS_REV}/" argocd/applications/templates/infra-onboarding.yaml

          # Replaces chart: infra/charts/{{$appName}} with path: {{$appName}}
          sed -i 's|chart: infra/charts/{{$appName}}|path: {{$appName}}|g' argocd/applications/templates/infra-core.yaml
          sed -i 's|chart: infra/charts/{{$appName}}|path: {{$appName}}|g' argocd/applications/templates/infra-managers.yaml
          sed -i 's|chart: infra/charts/{{$appName}}|path: {{$appName}}|g' argocd/applications/templates/infra-onboarding.yaml

          # Replaces repoURL with git URL of infra-charts repository
          sed -i 's|repoURL: {{ required "A valid chartRepoURL entry required!" .Values.argo.chartRepoURL }}|repoURL: https://github.com/open-edge-platform/infra-charts.git|g' argocd/applications/templates/infra-core.yaml
          sed -i 's|repoURL: {{ required "A valid chartRepoURL entry required!" .Values.argo.chartRepoURL }}|repoURL: https://github.com/open-edge-platform/infra-charts.git|g' argocd/applications/templates/infra-managers.yaml
          sed -i 's|repoURL: {{ required "A valid chartRepoURL entry required!" .Values.argo.chartRepoURL }}|repoURL: https://github.com/open-edge-platform/infra-charts.git|g' argocd/applications/templates/infra-onboarding.yaml

          git commit -a -m "Upgrade EIM infra-charts-upgr-test PR ${INFRA_CHARTS_REV}"

          echo "Apply updates..."
          mage deploy:orchLocal dev

      - name: Verify Infra Manager apps status
        id: verify-emf-status
        timeout-minutes: 20
        run: |
          echo "Verify deployment..."
          mage deploy:waitUntilComplete
          echo "Orchestrator upgrade done!"

          echo "Root App Status:"
          kubectl -n dev get applications root-app -o yaml
          echo "Infra Core App Status:"
          kubectl -n dev get applications infra-core -o yaml
          echo "Infra Managers App Status:"
          kubectl -n dev get applications infra-managers -o yaml
          echo "Infra External App Status:"
          kubectl -n dev get applications infra-external -o yaml
          echo "Infra Onboarding App Status:"
          kubectl -n dev get applications infra-onboarding -o yaml
          echo "Orchestrator upgrade verified!"

      - name: Synchronize applications
        id: sync-emf-apps
        timeout-minutes: 10
        run: |
          echo "Sync applications..."
          argocd app sync dev/infra-managers dev/infra-core dev/infra-onboarding --grpc-web
          echo "Applications synchronized"

      - name: Verify kind deployment after upgrade
        id: verify-emf-after-upgrade
        timeout-minutes: 10
        run: |
          echo "Verify deployment..."
          mage deploy:waitUntilComplete
          echo "Root App Status:"
          kubectl -n dev get applications root-app -o yaml
          echo "Infra Core App Status:"
          kubectl -n dev get applications infra-core -o yaml
          echo "Infra Managers App Status:"
          kubectl -n dev get applications infra-managers -o yaml
          echo "Infra External App Status:"
          kubectl -n dev get applications infra-external -o yaml
          echo "Infra Onboarding App Status:"
          kubectl -n dev get applications infra-onboarding -o yaml
          echo "Orchestrator upgrade verified!"

#      - name: Run E2E integration test - check status and delete Virtual Edge Node
#        working-directory: virtual-edge-node/edge-node-simulator
#        env:
#          CA_PATH: ${{ github.workspace }}/orch-ca.crt
#          PASSWORD: 'ChangeMeOn1stLogin!'
#          PROJECT: 'sample-project'
#        shell: bash
#        run: |
#          PROJECT_ID=$(kubectl get projects.project -o json | jq -r ".items[0].status.projectStatus.uID")
#
#          echo "Runs day0 tests - verify existing Virtual Edge Node is in running state and delete it"
#          # Runs day0 integration tests
#          ginkgo -v -r --fail-fast --race --json-report infra-tests-day0.json --output-dir . --label-filter="infra-tests-custom-day0-delete" ./test/infra -- \
#            -project=${PROJECT} -projectID=${PROJECT_ID} -caFilepath=${CA_PATH} -simAddress=127.0.0.1:3196 \
#            -orchFQDN=kind.internal -infraURL=http://127.0.0.1:8080/edge-infra.orchestrator.apis/v1 \
#            -edgeAPIUser=sample-project-api-user  -edgeAPIPass=${PASSWORD} \
#            -edgeOnboardUser=sample-project-onboarding-user -edgeOnboardPass=${PASSWORD}

      - name: Run infra E2E integration tests
        working-directory: virtual-edge-node/edge-node-simulator
        env:
          CA_PATH: ${{ github.workspace }}/orch-ca.crt
          PASSWORD: 'ChangeMeOn1stLogin!'
          PROJECT: 'sample-project'
        shell: bash
        run: |
          PROJECT_ID=$(kubectl get projects.project -o json | jq -r ".items[0].status.projectStatus.uID")

          echo "Runs day0 tests"
          # Runs day0 integration tests
          ginkgo -v -r --fail-fast --race --json-report infra-tests-day0.json --output-dir . --label-filter="infra-tests-day0" ./test/infra -- \
            -project=${PROJECT} -projectID=${PROJECT_ID} -caFilepath=${CA_PATH} -simAddress=127.0.0.1:3196 \
            -orchFQDN=kind.internal -infraURL=http://127.0.0.1:8080/edge-infra.orchestrator.apis/v1 \
            -edgeAPIUser=sample-project-api-user  -edgeAPIPass=${PASSWORD} \
            -edgeOnboardUser=sample-project-onboarding-user -edgeOnboardPass=${PASSWORD}

          echo "Runs day1 tests"
          # Runs day1 integration tests
          ginkgo -v -r --fail-fast --race --json-report infra-tests-day1.json --output-dir . --label-filter="infra-tests-day1" ./test/infra -- \
            -project=${PROJECT} -projectID=${PROJECT_ID} -caFilepath=${CA_PATH} -simAddress=127.0.0.1:3196 \
            -orchFQDN=kind.internal -infraURL=http://127.0.0.1:8080/edge-infra.orchestrator.apis/v1 \
            -edgeAPIUser=sample-project-api-user  -edgeAPIPass=${PASSWORD} \
            -edgeOnboardUser=sample-project-onboarding-user -edgeOnboardPass=${PASSWORD}

          echo "Runs day2 tests"
          # Runs day2 integration tests
          ginkgo -v -r --fail-fast --race --json-report infra-tests-day2.json --output-dir . --label-filter="infra-tests-day2" ./test/infra --  \
            -project=${PROJECT} -projectID=${PROJECT_ID} -caFilepath=${CA_PATH} -simAddress=127.0.0.1:3196 \
            -orchFQDN=kind.internal -infraURL=http://127.0.0.1:8080/edge-infra.orchestrator.apis/v1 \
            -edgeAPIUser=sample-project-api-user  -edgeAPIPass=${PASSWORD} \
            -edgeOnboardUser=sample-project-onboarding-user -edgeOnboardPass=${PASSWORD}

          echo "Run hosts/locations cleanup"
          ginkgo -v -r --fail-fast --race --label-filter="cleanup" ./test/infra --  \
            -project=${PROJECT} -projectID=${PROJECT_ID} -caFilepath=${CA_PATH} -simAddress=127.0.0.1:3196 \
            -orchFQDN=kind.internal -infraURL=http://127.0.0.1:8080/edge-infra.orchestrator.apis/v1 \
            -edgeAPIUser=sample-project-api-user  -edgeAPIPass=${PASSWORD} \
            -edgeOnboardUser=sample-project-onboarding-user -edgeOnboardPass=${PASSWORD}

          echo "Kill port-forward to ensim/api"
          kill $(ps -eaf | grep 'kubectl' | grep 'port-forward svc/ensim' | awk '{print $2}')
          kill $(ps -eaf | grep 'kubectl' | grep 'port-forward svc/api' | awk '{print $2}')

          echo "Retrieve ensim logs"
          kubectl -n orch-infra logs deploy/ensim > ensim-upgr.logs.txt

      - name: Get diagnostic information
        id: diagnostic-info
        if: ${{ always() && steps.deploy-orch.conclusion == 'success' }}
        run: |
          kubectl get pods -o wide -A | tee pods-list-upgr.txt
          kubectl describe pods -A | tee pods-describe-upgr.txt
          mage logutils:collectArgoDiags | tee argo-diag-upgr.txt
          kubectl get applications -o yaml -A | tee argocd-applications-upgr.yaml

      - name: Upload diagnostic artifacts
        if: ${{ always() && steps.diagnostic-info.conclusion == 'success' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02    # v4.6.2
        with:
          name: pods-apps-logs
          path: |
            argo-diag-upgr.txt
            pods-describe-upgr.txt
            pods-list-upgr.txt
            argocd-applications-upgr.yaml
