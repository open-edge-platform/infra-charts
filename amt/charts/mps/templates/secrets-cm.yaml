# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Values.job.secretjob.configmap }}"
  namespace: {{ .Release.Namespace }}
data:
  db-script.sh: |
    #!/bin/bash

    SECRET_VALUE_MPS=$(kubectl get secret mps-{{ .Values.postgresql.type }}-postgresql -n orch-infra -o jsonpath="{.data.PGPASSWORD}" | base64 --decode)
    SECRET_VALUE_RPS=$(kubectl get secret rps-{{ .Values.postgresql.type }}-postgresql -n orch-infra -o jsonpath="{.data.PGPASSWORD}" | base64 --decode)
    HOST_VALUE_MPS=$(kubectl get secret mps-{{ .Values.postgresql.type }}-postgresql -n orch-infra -o jsonpath="{.data.PGHOST}" | base64 --decode)
    HOST_VALUE_RPS=$(kubectl get secret rps-{{ .Values.postgresql.type }}-postgresql -n orch-infra -o jsonpath="{.data.PGHOST}" | base64 --decode)
    USER_VALUE_MPS=$(kubectl get secret mps-{{ .Values.postgresql.type }}-postgresql -n orch-infra -o jsonpath="{.data.PGUSER}" | base64 --decode)
    USER_VALUE_RPS=$(kubectl get secret rps-{{ .Values.postgresql.type }}-postgresql -n orch-infra -o jsonpath="{.data.PGUSER}" | base64 --decode)
    DATABASE_VALUE_MPS=$(kubectl get secret mps-{{ .Values.postgresql.type }}-postgresql -n orch-infra -o jsonpath="{.data.PGDATABASE}" | base64 --decode)
    DATABASE_VALUE_RPS=$(kubectl get secret rps-{{ .Values.postgresql.type }}-postgresql -n orch-infra -o jsonpath="{.data.PGDATABASE}" | base64 --decode)

    # Create connection strings for mps, mps-router, and rps
    connection_string_mps="postgresql://$USER_VALUE_MPS:$SECRET_VALUE_MPS@$HOST_VALUE_MPS/$DATABASE_VALUE_MPS?search_path=public{{ if eq ( .Values.postgresql.ssl | lower) "false" }}&sslmode=disable{{ else }}&sslmode=no-verify{{ end }}"
    connection_string_rps="postgresql://$USER_VALUE_RPS:$SECRET_VALUE_RPS@$HOST_VALUE_RPS/$DATABASE_VALUE_RPS?search_path=public{{ if eq ( .Values.postgresql.ssl | lower) "false" }}&sslmode=disable{{ else }}&sslmode=no-verify{{ end }}"

    # Output the connection strings for verification
    echo "Connection String (MPS): $connection_string_mps"
    echo "Connection String (RPS): $connection_string_rps"

    # Create Kubernetes secrets with the connection strings
    # Use apply to handle both creation and updates
    kubectl create secret generic mps --from-literal=connectionString="$connection_string_mps" -n orch-infra --dry-run=client -o yaml > /test/mps
    kubectl create secret generic rps --from-literal=connectionString="$connection_string_rps" -n orch-infra --dry-run=client -o yaml > /test/rps
    kubectl apply -f /test/mps
    kubectl apply -f /test/rps

